{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pptxlib","text":"<p>A Python library for automating Microsoft PowerPoint operations.</p>"},{"location":"#overview","title":"Overview","text":"<p>pptxlib is a high-level Python library that provides a simple and intuitive interface for automating Microsoft PowerPoint operations. It allows you to create, modify, and manage PowerPoint presentations programmatically.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Create and manage PowerPoint presentations</li> <li>Add and modify slides</li> <li>Work with shapes, tables, and charts</li> <li>Customize text, colors, and formatting</li> <li>Automate presentation generation</li> <li>Support for Windows platforms</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from pptxlib import App\n\napp = App()\npresentation = app.presentations.add()\nslide = presentation.slides.add()\nshape = slide.shapes.add(\"Rectangle\", 100, 100, 200, 100)\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pptxlib\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Windows operating system</li> <li>Microsoft PowerPoint</li> <li>Python 3.11 or higher</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing pptxlib, ensure you have the following:</p> <ul> <li>Windows operating system</li> <li>Microsoft PowerPoint installed on your system</li> <li>Python 3.11 or higher</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-uv","title":"Using uv","text":"<p>The recommended way to install pptxlib is using uv:</p> <pre><code>uv pip install pptxlib\n</code></pre>"},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<p>An alternative way to install pptxlib is using pip:</p> <pre><code>pip install pptxlib\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify the installation, you can run Python and check if the package is installed and if PowerPoint is available:</p> <pre><code>from pptxlib import is_powerpoint_available\n\nis_powerpoint_available()\n</code></pre> <p>True</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide demonstrates the core features of pptxlib through practical examples. You'll learn how to create a presentation with multiple slides and shapes.</p>"},{"location":"getting-started/quickstart/#creating-a-new-app","title":"Creating a New App","text":"<p>Initialize the PowerPoint application using the <code>App</code> class:</p> <pre><code>from pptxlib import App\n\napp = App()\napp\n</code></pre> <p>&lt;App&gt;</p> <p>Access the collection of presentations through the <code>presentations</code> attribute:</p> <pre><code>app.presentations\n</code></pre> <p>&lt;Presentations (0)&gt;</p>"},{"location":"getting-started/quickstart/#creating-a-new-presentation","title":"Creating a New Presentation","text":"<p>Create a new presentation using the <code>add</code> method:</p> <pre><code>pr = app.presentations.add()\npr\n</code></pre> <p>&lt;Presentation [Presentation1]&gt;</p> <p>Access specific presentations by index:</p> <pre><code>app.presentations[0]\n</code></pre> <p>&lt;Presentation [Presentation1]&gt;</p>"},{"location":"getting-started/quickstart/#adding-a-title-slide","title":"Adding a Title Slide","text":"<p>Create a title slide by specifying the <code>\"Title\"</code> layout:</p> <pre><code>slide = pr.slides.add(layout=\"Title\")\nslide.title = \"Welcome to pptxlib\"\n</code></pre> <p>Verify the slide collection and title:</p> <pre><code>pr.slides\n</code></pre> <p>&lt;Slides (1)&gt;</p> <pre><code>pr.slides[0].title\n</code></pre> <p>'Welcome to pptxlib'</p>"},{"location":"getting-started/quickstart/#adding-content-slides","title":"Adding Content Slides","text":"<p>Add content slides with different layouts:</p> <pre><code>slide = pr.slides.add(layout=\"TitleOnly\")\nslide.title = \"First Slide\"\n</code></pre> <p>The layout parameter is optional - it defaults to the previous slide's layout:</p> <pre><code>slide = pr.slides.add()\nslide.title = \"Second Slide\"\n</code></pre> <p>View all slides in the presentation:</p> <pre><code>pr.slides\n</code></pre> <p>&lt;Slides (3)&gt;</p>"},{"location":"getting-started/quickstart/#selecting-slides","title":"Selecting Slides","text":"<p>Select a slide for display:</p> <pre><code>slide.select()\n</code></pre> <p>Clear the selection:</p> <pre><code>app.unselect()\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-shapes","title":"Working with Shapes","text":"<p>Add a rectangle shape to the slide with precise positioning:</p> <pre><code>shape = slide.shapes.add(\"Rectangle\", 100, 100, 200, 100)\nshape\n</code></pre> <p>&lt;Shape [Rectangle 2]&gt;</p>"},{"location":"getting-started/quickstart/#quit-the-app","title":"Quit the App","text":"<p>Always ensure proper cleanup by quitting the application:</p> <pre><code>app.quit()\n</code></pre>"},{"location":"api/pptxlib/","title":"pptxlib","text":"pptxlib<p> source package pptxlib </p> <p> Classes </p> <ul> <li> <p>App \u2014 PowerPoint application interface.</p> </li> <li> <p>Layout</p> </li> <li> <p>Layouts</p> </li> <li> <p>Presentation</p> </li> <li> <p>Presentations</p> </li> <li> <p>Shape</p> </li> <li> <p>Shapes</p> </li> <li> <p>Slide</p> </li> <li> <p>Slides</p> </li> <li> <p>Table</p> </li> </ul> <p> Functions </p> <ul> <li> <p>is_powerpoint_available \u2014 Check if PowerPoint application is available on the system.</p> </li> </ul> <p> source dataclass App() </p> <p>Bases : Base</p> <p>PowerPoint application interface.</p> <p>This class provides a high-level interface to interact with Microsoft PowerPoint application. It manages the PowerPoint application instance and provides access to presentations and other PowerPoint features.</p> <p> Attributes </p> <ul> <li> <p>api :  DispatchBaseClass \u2014 The underlying PowerPoint COM object.</p> </li> <li> <p>app :  App \u2014 Reference to self for consistency with PowerPoint's object model.</p> </li> <li> <p>presentations :  Presentations \u2014 Get the collection of presentations.</p> </li> </ul> <p> Methods </p> <ul> <li> <p>quit \u2014 Quit the PowerPoint application.</p> </li> <li> <p>unselect \u2014 Unselect any selected objects in the active window.</p> </li> </ul> <p> source property App.presentations: Presentations </p> <p>Get the collection of presentations.</p> <p> Returns </p> <ul> <li> <p>Presentations \u2014 A collection of all open presentations.</p> </li> </ul> <p> source method App.quit() \u2192 None </p> <p>Quit the PowerPoint application.</p> <p> source method App.unselect() \u2192 None </p> <p>Unselect any selected objects in the active window.</p> <p> source dataclass Layout(api: DispatchBaseClass | CoClassBaseClass, parent: Presentation, collection: Layouts) </p> <p>Bases : Slide</p> <p> source dataclass Layouts(api: DispatchBaseClass | CoClassBaseClass, parent: Presentation) </p> <p>Bases : Collection[Layout]</p> <p> Methods </p> <ul> <li> <p>add</p> </li> <li> <p>get</p> </li> <li> <p>get_api</p> </li> <li> <p>copy_from</p> </li> </ul> <p> source method Layouts.add(name: str) \u2192 Layout </p> <p> source method Layouts.get(name: str) \u2192 Layout | None </p> <p> source method Layouts.get_api(layout: int | str | Layout | None) \u2192 int | DispatchBaseClass </p> <p> source method Layouts.copy_from(slide: Slide, name: str) \u2192 Layout </p> <p> source dataclass Presentation(api: DispatchBaseClass | CoClassBaseClass, parent: App, collection: Presentations) </p> <p>Bases : Element</p> <p> Methods </p> <ul> <li> <p>close</p> </li> <li> <p>delete</p> </li> <li> <p>size</p> </li> </ul> <p> source method Presentation.close() \u2192 None </p> <p> source method Presentation.delete() \u2192 None </p> <p> source property Presentation.slides: Slides </p> <p> source property Presentation.width: float </p> <p> source property Presentation.height: float </p> <p> source method Presentation.size(width: float, height: float) \u2192 Self </p> <p> source property Presentation.layouts: Layouts </p> <p> source dataclass Presentations(api: DispatchBaseClass | CoClassBaseClass, parent: App) </p> <p>Bases : Collection[Presentation]</p> <p> Methods </p> <ul> <li> <p>add</p> </li> <li> <p>close</p> </li> </ul> <p> source method Presentations.add() \u2192 Presentation </p> <p> source method Presentations.close() \u2192 None </p> <p> source property Presentations.active: Presentation </p> <p> source dataclass Shape(api: DispatchBaseClass | CoClassBaseClass, parent: Slide, collection: Shapes) </p> <p>Bases : Element</p> <p> Methods </p> <ul> <li> <p>select</p> </li> <li> <p>copy</p> </li> <li> <p>connect</p> </li> <li> <p>export</p> </li> <li> <p>png</p> </li> <li> <p>svg</p> </li> <li> <p>align_center</p> </li> <li> <p>text_margin</p> </li> </ul> <p> source property Shape.left: float </p> <p> source property Shape.top: float </p> <p> source property Shape.width: float </p> <p> source property Shape.height: float </p> <p> source property Shape.text_range: DispatchBaseClass </p> <p> source property Shape.text: str </p> <p> source property Shape.font: Font </p> <p> source property Shape.fill: Fill </p> <p> source property Shape.line: Line </p> <p> source method Shape.select(*, replace: bool = True) \u2192 ShapeRange </p> <p> source method Shape.copy() \u2192 None </p> <p> source method Shape.connect(shape: Shape, direction: str = 'horizontal') \u2192 Shape </p> <p> source method Shape.export(file_name: str | Path, fmt: str | int | None = None) \u2192 None </p> <p> source method Shape.png() \u2192 bytes </p> <p> source method Shape.svg() \u2192 str </p> <p> source method Shape.align_center() \u2192 Self </p> <p> source method Shape.text_margin(left: float = 0, top: float = 0, right: float | None = None, bottom: float | None = None) \u2192 Self </p> <p> source dataclass Shapes(api: DispatchBaseClass | CoClassBaseClass, parent: Slide) </p> <p>Bases : Collection[Shape]</p> <p> Methods </p> <ul> <li> <p>add</p> </li> <li> <p>add_line</p> </li> <li> <p>add_label</p> </li> <li> <p>add_table</p> </li> <li> <p>add_picture</p> </li> <li> <p>add_image</p> </li> <li> <p>add_figure</p> </li> <li> <p>add_connector</p> </li> <li> <p>paste</p> </li> <li> <p>paste_special</p> </li> <li> <p>range</p> </li> </ul> <p> source property Shapes.title: Shape </p> <p> source method Shapes.add(kind: int | str, left: float, top: float, width: float, height: float, text: str = '') \u2192 Shape </p> <p> source method Shapes.add_line(begin_x: float, begin_y: float, end_x: float, end_y: float) \u2192 Shape </p> <p> source method Shapes.add_label(text: str, left: float, top: float, width: float = 72, height: float = 72, *, auto_size: bool = True) \u2192 Shape </p> <p> source method Shapes.add_table(num_rows: int, num_columns: int, left: float = 100, top: float = 100, width: float = 100, height: float = 100) \u2192 Table </p> <p> source method Shapes.add_picture(file_name: str | Path, left: float = 0, top: float = 0, width: float = -1, height: float = -1, scale: float | None = None) \u2192 Shape </p> <p> source method Shapes.add_image(image: Image, left: float = 0, top: float = 0, width: float = -1, height: float = -1, scale: float | None = None) \u2192 Shape </p> <p> source method Shapes.add_figure(fig: Figure, left: float = 0, top: float = 0, width: float = -1, height: float = -1, scale: float | None = None, dpi: int | Literal['figure'] = 'figure', transparent: bool | None = None) \u2192 Shape </p> <p> source method Shapes.add_connector(shape1: Shape, shape2: Shape, direction: str = 'horizontal') \u2192 Shape </p> <p> source method Shapes.paste(left: float | None = None, top: float | None = None, width: float | None = None, height: float | None = None) \u2192 Shape </p> <p> source method Shapes.paste_special(data_type: int | str = 0, left: float | None = None, top: float | None = None, width: float | None = None, height: float | None = None) \u2192 Shape </p> <p> Parameters </p> <ul> <li> <p>data_type :  int \u2014 0: ppPasteDefault 1: ppPasteBitmap 2: ppPasteEnhancedMetafile 4: ppPasteGIF 8: ppPasteHTML 5: ppPasteJPG 3: ppPasteMetafilePicture 10: ppPasteOLEObject 6: ppPastePNG 9: ppPasteRTF 11: ppPasteShape 7: ppPasteText</p> </li> </ul> <p> source method Shapes.range(shapes: Iterable[Shape]) \u2192 ShapeRange </p> <p> source dataclass Slide(api: DispatchBaseClass | CoClassBaseClass, parent: Presentation, collection: Slides) </p> <p>Bases : Element</p> <p> Methods </p> <ul> <li> <p>export</p> </li> <li> <p>png</p> </li> <li> <p>set</p> </li> </ul> <p> source property Slide.shapes: Shapes </p> <p> source property Slide.title: str </p> <p> source property Slide.width: float </p> <p> source property Slide.height: float </p> <p> source method Slide.export(file_name: str | Path, fmt: str | None = None) \u2192 None </p> <p> source method Slide.png() \u2192 bytes </p> <p> source property Slide.layout: Layout </p> <p> source method Slide.set(title: str | None = None, layout: int | str | Layout | None = None) \u2192 Self </p> <p> source dataclass Slides(api: DispatchBaseClass | CoClassBaseClass, parent: Presentation) </p> <p>Bases : Collection[Slide]</p> <p> Methods </p> <ul> <li> <p>add</p> </li> </ul> <p> source method Slides.add(index: int | None = None, layout: int | str | Layout | None = None) \u2192 Slide </p> <p> source property Slides.active: Slide </p> <p> source dataclass Table(api: DispatchBaseClass | CoClassBaseClass, parent: Slide, collection: Shapes) </p> <p>Bases : Shape</p> <p> Methods </p> <ul> <li> <p>cell</p> </li> <li> <p>minimize_height</p> </li> <li> <p>reset_style</p> </li> </ul> <p> source property Table.rows: Rows </p> <p> source property Table.columns: Columns </p> <p> source property Table.shape: tuple[int, int] </p> <p> source method Table.cell(row: int, column: int | None = None) \u2192 Cell </p> <p> source method Table.minimize_height() \u2192 None </p> <p> source method Table.reset_style(weight: float = 2, weight_inside: float = 1, color: int | str | tuple[int, int, int] = 'black', color_inside: int | str | tuple[int, int, int] = 'black') \u2192 None </p> <p> source is_powerpoint_available() \u2192 bool </p> <p>Check if PowerPoint application is available on the system.</p> <p>This function attempts to create a PowerPoint application instance to verify if PowerPoint is installed and accessible.</p> <p> Returns </p> <ul> <li> <p>bool \u2014 True if PowerPoint is available, False otherwise.</p> </li> </ul>"},{"location":"api/pptxlib/app/","title":"pptxlib.app","text":"pptxlib.app<p> source module pptxlib.app </p> <p>PowerPoint application interface module.</p> <p>This module provides a high-level interface to interact with Microsoft PowerPoint application through COM automation.</p> <p> Classes </p> <ul> <li> <p>App \u2014 PowerPoint application interface.</p> </li> </ul> <p> Functions </p> <ul> <li> <p>is_powerpoint_available \u2014 Check if PowerPoint application is available on the system.</p> </li> </ul> <p> source dataclass App() </p> <p>Bases : Base</p> <p>PowerPoint application interface.</p> <p>This class provides a high-level interface to interact with Microsoft PowerPoint application. It manages the PowerPoint application instance and provides access to presentations and other PowerPoint features.</p> <p> Attributes </p> <ul> <li> <p>api :  DispatchBaseClass \u2014 The underlying PowerPoint COM object.</p> </li> <li> <p>app :  App \u2014 Reference to self for consistency with PowerPoint's object model.</p> </li> <li> <p>presentations :  Presentations \u2014 Get the collection of presentations.</p> </li> </ul> <p> Methods </p> <ul> <li> <p>quit \u2014 Quit the PowerPoint application.</p> </li> <li> <p>unselect \u2014 Unselect any selected objects in the active window.</p> </li> </ul> <p> source property App.presentations: Presentations </p> <p>Get the collection of presentations.</p> <p> Returns </p> <ul> <li> <p>Presentations \u2014 A collection of all open presentations.</p> </li> </ul> <p> source method App.quit() \u2192 None </p> <p>Quit the PowerPoint application.</p> <p> source method App.unselect() \u2192 None </p> <p>Unselect any selected objects in the active window.</p> <p> source is_powerpoint_available() \u2192 bool </p> <p>Check if PowerPoint application is available on the system.</p> <p>This function attempts to create a PowerPoint application instance to verify if PowerPoint is installed and accessible.</p> <p> Returns </p> <ul> <li> <p>bool \u2014 True if PowerPoint is available, False otherwise.</p> </li> </ul>"},{"location":"api/pptxlib/base/","title":"pptxlib.base","text":"pptxlib.base<p> source module pptxlib.base </p> <p> Classes </p> <ul> <li> <p>Base</p> </li> <li> <p>Element</p> </li> <li> <p>Collection</p> </li> </ul> <p> source dataclass Base(api: DispatchBaseClass | CoClassBaseClass) </p> <p> source dataclass Element(api: DispatchBaseClass | CoClassBaseClass, parent: Element, collection: Collection) </p> <p>Bases : Base</p> <p> Methods </p> <ul> <li> <p>select</p> </li> <li> <p>delete</p> </li> </ul> <p> source property Element.name: str </p> <p> source method Element.select() \u2192 None </p> <p> source method Element.delete() \u2192 None </p> <p> source dataclass Collection(api: DispatchBaseClass | CoClassBaseClass, parent: Element) </p> <p>Bases : Base, Generic[E]</p>"},{"location":"api/pptxlib/client/","title":"pptxlib.client","text":"pptxlib.client<p> source module pptxlib.client </p> <p> Functions </p> <ul> <li> <p>iter_typelib_specs</p> </li> <li> <p>ensure_module</p> </li> <li> <p>ensure_modules</p> </li> </ul> <p> source iter_typelib_specs() \u2192 Iterator[TypelibSpec] </p> <p> source ensure_module(tlb: TypelibSpec) \u2192 None </p> <p> source ensure_modules() \u2192 None </p>"},{"location":"api/pptxlib/color/","title":"pptxlib.color","text":"pptxlib.color<p> source module pptxlib.color </p> <p> Functions </p> <ul> <li> <p>rgb \u2014 Return the RGB color integer.</p> </li> </ul> <p> source rgb(color: int | tuple[int, int, int] | str, green: int | None = None, blue: int | None = None) \u2192 int </p> <p>Return the RGB color integer.</p> <p> Parameters </p> <ul> <li> <p>color :  int, tuple[int, int, int], or str \u2014 The color or red value.</p> </li> <li> <p>green :  int \u2014 The green value.</p> </li> <li> <p>blue :  int \u2014 The blue value.</p> </li> </ul> <p> Examples </p> <pre><code>rgb(4)\n</code></pre> <pre><code>4\n</code></pre> <pre><code>rgb((100, 200, 40))\n</code></pre> <pre><code>2672740\n</code></pre> <pre><code>rgb(\"pink\")\n</code></pre> <pre><code>13353215\n</code></pre> <pre><code>rgb(\"#123456\")\n</code></pre> <pre><code>5649426\n</code></pre> <p> Raises </p> <ul> <li> <p>ValueError</p> </li> </ul>"},{"location":"api/pptxlib/font/","title":"pptxlib.font","text":"pptxlib.font<p> source module pptxlib.font </p> <p> Classes </p> <ul> <li> <p>Font</p> </li> </ul> <p> source dataclass Font(api: DispatchBaseClass | CoClassBaseClass) </p> <p>Bases : Base</p> <p> Methods </p> <ul> <li> <p>set</p> </li> <li> <p>update</p> </li> </ul> <p> source property Font.name: str </p> <p> source property Font.size: float </p> <p> source property Font.bold: bool </p> <p> source property Font.italic: bool </p> <p> source property Font.color: int </p> <p> source method Font.set(name: str | None = None, size: float | None = None, bold: bool | None = None, italic: bool | None = None, color: int | str | tuple[int, int, int] | None = None) \u2192 Self </p> <p> source method Font.update(font: Font) \u2192 Self </p>"},{"location":"api/pptxlib/gantt/","title":"pptxlib.gantt","text":"pptxlib.gantt<p> source module pptxlib.gantt </p> <p> Classes </p> <ul> <li> <p>GanttKind</p> </li> <li> <p>GanttFrame</p> </li> <li> <p>GanttChart</p> </li> </ul> <p> Functions </p> <ul> <li> <p>date_index</p> </li> <li> <p>fiscal_year</p> </li> </ul> <p> source date_index(kind: str, start: datetime, end: datetime) \u2192 list[datetime] </p> <p> Raises </p> <ul> <li> <p>ValueError</p> </li> </ul> <p> source fiscal_year(date: datetime) \u2192 str </p> <p> source enum GanttKind(*args, **kwds) </p> <p>Bases : Enum</p> <p> Attributes </p> <ul> <li> <p>MONTH</p> </li> <li> <p>WEEK</p> </li> <li> <p>DAY</p> </li> </ul> <p> source class GanttFrame(kind: str, start: datetime, end: datetime) </p> <p> source property GanttFrame.name: str </p> <p> source property GanttFrame.days: int </p> <p> source class GanttChart(kind: str, start: datetime, end: datetime) </p> <p> Methods </p> <ul> <li> <p>add_table</p> </li> <li> <p>x</p> </li> <li> <p>y</p> </li> <li> <p>add</p> </li> </ul> <p> source method GanttChart.add_table(slide: Slide, left: float, top: float, right: float | None = None, bottom: float | None = None, index_width: float = 100, index_font_size: float = 14, font_size: float = 12) \u2192 Table </p> <p> source property GanttChart.origin: tuple[float, float] </p> <p> source property GanttChart.day_width: float </p> <p> source method GanttChart.x(date: datetime) \u2192 float </p> <p> source method GanttChart.y(offset: float) \u2192 float </p> <p> source method GanttChart.add(date: datetime, offset: float, width: float = 20, height: float | None = None, kind: str = 'Oval', text: str = 'day', color: int | str | tuple[int, int, int] | None = None) \u2192 Shape </p>"},{"location":"api/pptxlib/presentation/","title":"pptxlib.presentation","text":"pptxlib.presentation<p> source module pptxlib.presentation </p> <p> Classes </p> <ul> <li> <p>Presentation</p> </li> <li> <p>Presentations</p> </li> </ul> <p> source dataclass Presentation(api: DispatchBaseClass | CoClassBaseClass, parent: App, collection: Presentations) </p> <p>Bases : Element</p> <p> Methods </p> <ul> <li> <p>close</p> </li> <li> <p>delete</p> </li> <li> <p>size</p> </li> </ul> <p> source method Presentation.close() \u2192 None </p> <p> source method Presentation.delete() \u2192 None </p> <p> source property Presentation.slides: Slides </p> <p> source property Presentation.width: float </p> <p> source property Presentation.height: float </p> <p> source method Presentation.size(width: float, height: float) \u2192 Self </p> <p> source property Presentation.layouts: Layouts </p> <p> source dataclass Presentations(api: DispatchBaseClass | CoClassBaseClass, parent: App) </p> <p>Bases : Collection[Presentation]</p> <p> Methods </p> <ul> <li> <p>add</p> </li> <li> <p>close</p> </li> </ul> <p> source method Presentations.add() \u2192 Presentation </p> <p> source method Presentations.close() \u2192 None </p> <p> source property Presentations.active: Presentation </p>"},{"location":"api/pptxlib/shape/","title":"pptxlib.shape","text":"pptxlib.shape<p> source module pptxlib.shape </p> <p> Classes </p> <ul> <li> <p>Color</p> </li> <li> <p>Fill</p> </li> <li> <p>Line</p> </li> <li> <p>Shape</p> </li> <li> <p>Shapes</p> </li> <li> <p>ShapeRange</p> </li> </ul> <p> source dataclass Color(api: DispatchBaseClass | CoClassBaseClass) </p> <p>Bases : Base</p> <p> Methods </p> <ul> <li> <p>set</p> </li> <li> <p>update</p> </li> </ul> <p> source property Color.color: int </p> <p> source property Color.alpha: float </p> <p> source property Color.visible: bool </p> <p> source method Color.set(color: int | str | tuple[int, int, int] | None = None, alpha: float | None = None, visible: bool | None = None) \u2192 Self </p> <p> source method Color.update(color: Color) \u2192 None </p> <p> source dataclass Fill(api: DispatchBaseClass | CoClassBaseClass) </p> <p>Bases : Color</p> <p> source dataclass Line(api: DispatchBaseClass | CoClassBaseClass) </p> <p>Bases : Color</p> <p> Methods </p> <ul> <li> <p>set</p> </li> <li> <p>update</p> </li> <li> <p>dash</p> </li> <li> <p>begin_arrow</p> </li> <li> <p>end_arrow</p> </li> </ul> <p> source property Line.weight: float </p> <p> source method Line.set(weight: float | None = None, color: int | str | tuple[int, int, int] | None = None, alpha: float | None = None) \u2192 Self </p> <p> source method Line.update(line: Line) \u2192 None </p> <p> source property Line.dash_style: int </p> <p> source method Line.dash(dash_style: int | str = 'Dash') \u2192 Self </p> <p> source property Line.begin_arrowhead_style: int </p> <p> source property Line.end_arrowhead_style: int </p> <p> source property Line.begin_arrowhead_length: int </p> <p> source property Line.end_arrowhead_length: int </p> <p> source property Line.begin_arrowhead_width: int </p> <p> source property Line.end_arrowhead_width: int </p> <p> source method Line.begin_arrow(style: int | str | None = None, length: int | str | None = None, width: int | str | None = None) \u2192 Self </p> <p> source method Line.end_arrow(style: int | str | None = None, length: int | str | None = None, width: int | str | None = None) \u2192 Self </p> <p> source dataclass Shape(api: DispatchBaseClass | CoClassBaseClass, parent: Slide, collection: Shapes) </p> <p>Bases : Element</p> <p> Methods </p> <ul> <li> <p>select</p> </li> <li> <p>copy</p> </li> <li> <p>connect</p> </li> <li> <p>export</p> </li> <li> <p>png</p> </li> <li> <p>svg</p> </li> <li> <p>align_center</p> </li> <li> <p>text_margin</p> </li> </ul> <p> source property Shape.left: float </p> <p> source property Shape.top: float </p> <p> source property Shape.width: float </p> <p> source property Shape.height: float </p> <p> source property Shape.text_range: DispatchBaseClass </p> <p> source property Shape.text: str </p> <p> source property Shape.font: Font </p> <p> source property Shape.fill: Fill </p> <p> source property Shape.line: Line </p> <p> source method Shape.select(*, replace: bool = True) \u2192 ShapeRange </p> <p> source method Shape.copy() \u2192 None </p> <p> source method Shape.connect(shape: Shape, direction: str = 'horizontal') \u2192 Shape </p> <p> source method Shape.export(file_name: str | Path, fmt: str | int | None = None) \u2192 None </p> <p> source method Shape.png() \u2192 bytes </p> <p> source method Shape.svg() \u2192 str </p> <p> source method Shape.align_center() \u2192 Self </p> <p> source method Shape.text_margin(left: float = 0, top: float = 0, right: float | None = None, bottom: float | None = None) \u2192 Self </p> <p> source dataclass Shapes(api: DispatchBaseClass | CoClassBaseClass, parent: Slide) </p> <p>Bases : Collection[Shape]</p> <p> Methods </p> <ul> <li> <p>add</p> </li> <li> <p>add_line</p> </li> <li> <p>add_label</p> </li> <li> <p>add_table</p> </li> <li> <p>add_picture</p> </li> <li> <p>add_image</p> </li> <li> <p>add_figure</p> </li> <li> <p>add_connector</p> </li> <li> <p>paste</p> </li> <li> <p>paste_special</p> </li> <li> <p>range</p> </li> </ul> <p> source property Shapes.title: Shape </p> <p> source method Shapes.add(kind: int | str, left: float, top: float, width: float, height: float, text: str = '') \u2192 Shape </p> <p> source method Shapes.add_line(begin_x: float, begin_y: float, end_x: float, end_y: float) \u2192 Shape </p> <p> source method Shapes.add_label(text: str, left: float, top: float, width: float = 72, height: float = 72, *, auto_size: bool = True) \u2192 Shape </p> <p> source method Shapes.add_table(num_rows: int, num_columns: int, left: float = 100, top: float = 100, width: float = 100, height: float = 100) \u2192 Table </p> <p> source method Shapes.add_picture(file_name: str | Path, left: float = 0, top: float = 0, width: float = -1, height: float = -1, scale: float | None = None) \u2192 Shape </p> <p> source method Shapes.add_image(image: Image, left: float = 0, top: float = 0, width: float = -1, height: float = -1, scale: float | None = None) \u2192 Shape </p> <p> source method Shapes.add_figure(fig: Figure, left: float = 0, top: float = 0, width: float = -1, height: float = -1, scale: float | None = None, dpi: int | Literal['figure'] = 'figure', transparent: bool | None = None) \u2192 Shape </p> <p> source method Shapes.add_connector(shape1: Shape, shape2: Shape, direction: str = 'horizontal') \u2192 Shape </p> <p> source method Shapes.paste(left: float | None = None, top: float | None = None, width: float | None = None, height: float | None = None) \u2192 Shape </p> <p> source method Shapes.paste_special(data_type: int | str = 0, left: float | None = None, top: float | None = None, width: float | None = None, height: float | None = None) \u2192 Shape </p> <p> Parameters </p> <ul> <li> <p>data_type :  int \u2014 0: ppPasteDefault 1: ppPasteBitmap 2: ppPasteEnhancedMetafile 4: ppPasteGIF 8: ppPasteHTML 5: ppPasteJPG 3: ppPasteMetafilePicture 10: ppPasteOLEObject 6: ppPastePNG 9: ppPasteRTF 11: ppPasteShape 7: ppPasteText</p> </li> </ul> <p> source method Shapes.range(shapes: Iterable[Shape]) \u2192 ShapeRange </p> <p> source dataclass ShapeRange(api: DispatchBaseClass | CoClassBaseClass, parent: Slide, collection: Shapes) </p> <p>Bases : Shape</p>"},{"location":"api/pptxlib/slide/","title":"pptxlib.slide","text":"pptxlib.slide<p> source module pptxlib.slide </p> <p> Classes </p> <ul> <li> <p>Slide</p> </li> <li> <p>Layout</p> </li> <li> <p>Slides</p> </li> <li> <p>Layouts</p> </li> </ul> <p> source dataclass Slide(api: DispatchBaseClass | CoClassBaseClass, parent: Presentation, collection: Slides) </p> <p>Bases : Element</p> <p> Methods </p> <ul> <li> <p>export</p> </li> <li> <p>png</p> </li> <li> <p>set</p> </li> </ul> <p> source property Slide.shapes: Shapes </p> <p> source property Slide.title: str </p> <p> source property Slide.width: float </p> <p> source property Slide.height: float </p> <p> source method Slide.export(file_name: str | Path, fmt: str | None = None) \u2192 None </p> <p> source method Slide.png() \u2192 bytes </p> <p> source property Slide.layout: Layout </p> <p> source method Slide.set(title: str | None = None, layout: int | str | Layout | None = None) \u2192 Self </p> <p> source dataclass Layout(api: DispatchBaseClass | CoClassBaseClass, parent: Presentation, collection: Layouts) </p> <p>Bases : Slide</p> <p> source dataclass Slides(api: DispatchBaseClass | CoClassBaseClass, parent: Presentation) </p> <p>Bases : Collection[Slide]</p> <p> Methods </p> <ul> <li> <p>add</p> </li> </ul> <p> source method Slides.add(index: int | None = None, layout: int | str | Layout | None = None) \u2192 Slide </p> <p> source property Slides.active: Slide </p> <p> source dataclass Layouts(api: DispatchBaseClass | CoClassBaseClass, parent: Presentation) </p> <p>Bases : Collection[Layout]</p> <p> Methods </p> <ul> <li> <p>add</p> </li> <li> <p>get</p> </li> <li> <p>get_api</p> </li> <li> <p>copy_from</p> </li> </ul> <p> source method Layouts.add(name: str) \u2192 Layout </p> <p> source method Layouts.get(name: str) \u2192 Layout | None </p> <p> source method Layouts.get_api(layout: int | str | Layout | None) \u2192 int | DispatchBaseClass </p> <p> source method Layouts.copy_from(slide: Slide, name: str) \u2192 Layout </p>"},{"location":"api/pptxlib/table/","title":"pptxlib.table","text":"pptxlib.table<p> source module pptxlib.table </p> <p> Classes </p> <ul> <li> <p>Table</p> </li> <li> <p>Axis</p> </li> <li> <p>Row</p> </li> <li> <p>Column</p> </li> <li> <p>Rows</p> </li> <li> <p>Columns</p> </li> <li> <p>Cell</p> </li> <li> <p>CellRange</p> </li> <li> <p>LineFormat</p> </li> <li> <p>LineFormatCollection</p> </li> <li> <p>Borders</p> </li> <li> <p>BordersCollection</p> </li> </ul> <p> Functions </p> <ul> <li> <p>set_text</p> </li> </ul> <p> source dataclass Table(api: DispatchBaseClass | CoClassBaseClass, parent: Slide, collection: Shapes) </p> <p>Bases : Shape</p> <p> Methods </p> <ul> <li> <p>cell</p> </li> <li> <p>minimize_height</p> </li> <li> <p>reset_style</p> </li> </ul> <p> source property Table.rows: Rows </p> <p> source property Table.columns: Columns </p> <p> source property Table.shape: tuple[int, int] </p> <p> source method Table.cell(row: int, column: int | None = None) \u2192 Cell </p> <p> source method Table.minimize_height() \u2192 None </p> <p> source method Table.reset_style(weight: float = 2, weight_inside: float = 1, color: int | str | tuple[int, int, int] = 'black', color_inside: int | str | tuple[int, int, int] = 'black') \u2192 None </p> <p> source set_text(cells: Iterable[Cell], texts: Iterable[str], *, size: float | None = None, bold: bool = False, merge: bool = False) \u2192 None </p> <p> source dataclass Axis(api: DispatchBaseClass | CoClassBaseClass, parent: Table, collection: Rows | Columns) </p> <p>Bases : Element</p> <p> Methods </p> <ul> <li> <p>text</p> </li> </ul> <p> source property Axis.cells: CellRange </p> <p> source property Axis.borders: Borders </p> <p> source method Axis.text(texts: Iterable[str], *, size: float | None = None, bold: bool = False, merge: bool = False) \u2192 None </p> <p> source dataclass Row(api: DispatchBaseClass | CoClassBaseClass, parent: Table, collection: Rows) </p> <p>Bases : Axis</p> <p> source property Row.height: float </p> <p> source dataclass Column(api: DispatchBaseClass | CoClassBaseClass, parent: Table, collection: Columns) </p> <p>Bases : Axis</p> <p> source property Column.width: float </p> <p> source dataclass Rows(api: DispatchBaseClass | CoClassBaseClass, parent: Table) </p> <p>Bases : Collection[Row]</p> <p> source property Rows.height: list[float] </p> <p> source property Rows.borders: BordersCollection </p> <p> source dataclass Columns(api: DispatchBaseClass | CoClassBaseClass, parent: Table) </p> <p>Bases : Collection[Column]</p> <p> source property Columns.width: list[float] </p> <p> source property Columns.borders: BordersCollection </p> <p> source dataclass Cell(api: DispatchBaseClass | CoClassBaseClass, parent: Table, collection: CellRange) </p> <p>Bases : Element</p> <p> Methods </p> <ul> <li> <p>merge</p> </li> </ul> <p> source property Cell.shape: Shape </p> <p> source property Cell.text: str </p> <p> source property Cell.borders: Borders </p> <p> source method Cell.merge(merge_to: Cell) \u2192 None </p> <p> source dataclass CellRange(api: DispatchBaseClass | CoClassBaseClass, parent: Axis) </p> <p>Bases : Collection[Cell]</p> <p> source property CellRange.borders: Borders </p> <p> source dataclass LineFormat(api: DispatchBaseClass | CoClassBaseClass, parent: Table, collection: Borders) </p> <p>Bases : Element, Line</p> <p> source dataclass LineFormatCollection(items: list[LineFormat]) </p> <p> Methods </p> <ul> <li> <p>set</p> </li> </ul> <p> source method LineFormatCollection.set(weight: float | None = None, color: int | str | tuple[int, int, int] | None = None, alpha: float | None = None) \u2192 Self </p> <p> source dataclass Borders(api: DispatchBaseClass | CoClassBaseClass, parent: Table) </p> <p>Bases : Collection[LineFormat]</p> <p> source dataclass BordersCollection(items: list[Borders]) </p>"}]}